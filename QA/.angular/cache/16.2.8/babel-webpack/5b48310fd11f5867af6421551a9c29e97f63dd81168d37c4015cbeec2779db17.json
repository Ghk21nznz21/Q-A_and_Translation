{"ast":null,"code":"\"use strict\";\n\nvar __esDecorate = this && this.__esDecorate || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) {\n    if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\");\n    return f;\n  }\n  var kind = contextIn.kind,\n    key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _,\n    done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n    var context = {};\n    for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n    for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n    context.addInitializer = function (f) {\n      if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\");\n      extraInitializers.push(accept(f || null));\n    };\n    var result = (0, decorators[i])(kind === \"accessor\" ? {\n      get: descriptor.get,\n      set: descriptor.set\n    } : descriptor[key], context);\n    if (kind === \"accessor\") {\n      if (result === void 0) continue;\n      if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n      if (_ = accept(result.get)) descriptor.get = _;\n      if (_ = accept(result.set)) descriptor.set = _;\n      if (_ = accept(result.init)) initializers.unshift(_);\n    } else if (_ = accept(result)) {\n      if (kind === \"field\") initializers.unshift(_);else descriptor[key] = _;\n    }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\nvar __runInitializers = this && this.__runInitializers || function (thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n    value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AppComponent = void 0;\nconst core_1 = require(\"@angular/core\");\nconst http_1 = require(\"@angular/common/http\");\nconst flowbite_1 = require(\"flowbite\");\nlet AppComponent = exports.AppComponent = (() => {\n  let _classDecorators = [(0, core_1.Component)({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css']\n  })];\n  let _classDescriptor;\n  let _classExtraInitializers = [];\n  let _classThis;\n  var AppComponent = class {\n    static #_ = (() => {\n      __esDecorate(null, _classDescriptor = {\n        value: this\n      }, _classDecorators, {\n        kind: \"class\",\n        name: this.name\n      }, null, _classExtraInitializers);\n      AppComponent = _classThis = _classDescriptor.value;\n      __runInitializers(_classThis, _classExtraInitializers);\n    })();\n    constructor(http) {\n      this.http = http;\n      this.title = 'QA';\n      this.conversation = [];\n      this.allowQuestion = true;\n      this.fileName = \"all\";\n      this.fileContent = '';\n      this.language = 'en';\n      this.task = 'QA';\n      // Database Files \n      this.allFiles = [\"All\"];\n      this.languages = ['en', 'fr', 'pt', 'es'];\n      this.tasks = ['QA', 'Translation'];\n      // toast\n      this.message = '';\n      this.httpHeader = {\n        headers: new http_1.HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n      console.log('Start');\n    }\n    ngOnInit() {\n      (0, flowbite_1.initFlowbite)();\n      // reset message\n      setInterval(() => {\n        this.message = '';\n      }, 3000);\n    }\n    onFileSelected(fileList) {\n      this.message = '';\n      let file = fileList[0];\n      let fileReader = new FileReader();\n      let text = '';\n      let self = this;\n      fileReader.onloadend = function (x) {\n        // async\n        text = fileReader.result;\n        self.uploadFile(file.name, file.type, text);\n      };\n      fileReader.readAsText(file);\n    }\n    onLanguageChange(language) {\n      if (language.value != this.language) {\n        // restore conversation on change \n        this.conversation = [];\n        this.language = language.value;\n      }\n    }\n    onFileChange(fileName) {\n      if (fileName.value != this.fileName) {\n        // restore conversation on change \n        this.conversation = [];\n        this.fileName = fileName.value;\n      }\n    }\n    onTaskChange(task) {\n      if (task.value != this.task) {\n        // restore conversation on change \n        this.conversation = [];\n        this.task = task.value;\n      }\n    }\n    uploadFile(name, type, text) {\n      this.http.post('http://localhost:5000/upload', {\n        'name': name,\n        'type': type,\n        'text': text\n      }, this.httpHeader).subscribe({\n        next: data => {\n          this.allFiles.push(name), console.log('data', data);\n          this.message = 'data';\n        },\n        error: error => {\n          console.log('Error upload', error), this.message = 'Error';\n        }\n      });\n    }\n    sendQuestion(text) {\n      if (this.allowQuestion) {\n        this.conversation.push(text);\n        this.allowQuestion = false;\n        this.http.post('http://localhost:5000/query', {\n          'text': text,\n          \"fileName\": this.fileName,\n          \"language\": this.language,\n          \"task\": this.task\n        }, this.httpHeader).subscribe({\n          next: data => {\n            this.conversation.push(data.message);\n            this.allowQuestion = true;\n            console.log('Received', data.message);\n            this.message = 'data';\n          },\n          error: error => {\n            const message_error = 'Message Error';\n            this.conversation.push(message_error);\n            this.allowQuestion = true;\n            console.log('Error', error);\n            this.message = 'Error';\n          }\n        });\n      }\n    }\n  };\n  return AppComponent = _classThis;\n})();","map":{"version":3,"names":["core_1","require","http_1","flowbite_1","AppComponent","exports","Component","selector","templateUrl","styleUrls","__esDecorate","_classDescriptor","value","_classDecorators","kind","name","_classExtraInitializers","__runInitializers","_classThis","constructor","http","title","conversation","allowQuestion","fileName","fileContent","language","task","allFiles","languages","tasks","message","httpHeader","headers","HttpHeaders","console","log","ngOnInit","initFlowbite","setInterval","onFileSelected","fileList","file","fileReader","FileReader","text","self","onloadend","x","result","uploadFile","type","readAsText","onLanguageChange","onFileChange","onTaskChange","post","subscribe","next","data","push","error","sendQuestion","message_error"],"sources":["/home/ghk21nznz/Desktop/ISEG/NLP/project/QA/src/app/app.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { OnInit } from '@angular/core';\nimport { initFlowbite } from 'flowbite';\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\n\n\nexport class AppComponent implements OnInit {\n  title = 'QA';\n  conversation : string[] = [];\n  allowQuestion = true; \n  fileName: string = \"all\"; \n  fileContent: any = '';\n  language: string = 'en'\n  task: string = 'QA'\n\n  // Database Files \n  allFiles: string[] = [\"All\"];\n  languages = ['en', 'fr', 'pt', 'es'];\n  tasks = ['QA', 'Translation'];\n\n  // toast\n  message = ''\n  \n  httpHeader = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json' \n    })\n  };\n\n  constructor(private http: HttpClient) {\n    console.log('Start')\n  }\n\n    ngOnInit(): void {\n    initFlowbite();\n    // reset message\n    setInterval(() => {this.message = '';}, 3000);\n  }\n\n  onFileSelected(fileList: FileList) {\n    this.message = ''\n    let file = fileList[0];\n    let fileReader: FileReader = new FileReader();\n    let text: any = '';\n    let self = this;\n    fileReader.onloadend = function (x) {\n      // async\n      text = fileReader.result;\n      self.uploadFile(file.name, file.type, text);\n    };\n    fileReader.readAsText(file);\n  }\n\n\n  onLanguageChange(language: any) {\n    if (language.value != this.language){\n      // restore conversation on change \n      this.conversation = []\n      this.language = language.value;\n    }\n  }\n  onFileChange(fileName: any) {\n    if (fileName.value != this.fileName){\n      // restore conversation on change \n      this.conversation = []\n      this.fileName = fileName.value;\n    }\n  }\n\n  onTaskChange(task: any) {\n    if (task.value != this.task){\n      // restore conversation on change \n      this.conversation = []\n      this.task = task.value;\n    }\n  }\n\n  uploadFile(name: string, type:string, text: string) {\n    this.http.post('http://localhost:5000/upload', {'name': name, 'type': type, 'text': text}, this.httpHeader).subscribe({\n      next: (data: any) => {\n        this.allFiles.push(name),\n        console.log('data',data)\n        this.message = 'data'\n      },\n      error: (error) => {\n        console.log('Error upload', error),\n        this.message = 'Error'\n      }\n    })\n  }\n\n  sendQuestion(text: string) {\n    if (this.allowQuestion) {\n      this.conversation.push(text);\n      this.allowQuestion = false \n      this.http.post('http://localhost:5000/query', \n          {'text': text, \"fileName\": this.fileName, \"language\": this.language, \"task\": this.task}, \n          this.httpHeader).subscribe({\n        next: (data: any) => {\n          this.conversation.push(data.message) \n          this.allowQuestion = true;\n          console.log('Received', data.message)\n          this.message = 'data'\n        },\n        error: (error) => {\n          const message_error = 'Message Error';\n          this.conversation.push(message_error);\n          this.allowQuestion = true;\n          console.log('Error', error)\n          this.message = 'Error'\n        }\n      })\n    }\n  }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}